model:
  si:
    class_path: omg.si.stochastic_interpolants.StochasticInterpolants
    init_args:
      stochastic_interpolants:
        # chemical species
        - class_path: omg.si.single_stochastic_interpolant_identity.SingleStochasticInterpolantIdentity
        # fractional coordinates
        - class_path: omg.si.single_stochastic_interpolant.SingleStochasticInterpolant
          init_args:
            interpolant: omg.si.interpolants.PeriodicLinearInterpolant
            gamma: null
            epsilon: null
            differential_equation_type: "ODE"
            integrator_kwargs:
              method: "euler"
        # lattice vectors
        - class_path: omg.si.single_stochastic_interpolant.SingleStochasticInterpolant
          init_args:
            interpolant: omg.si.interpolants.LinearInterpolant
            gamma: null
            epsilon: null
            differential_equation_type: "ODE"
            integrator_kwargs:
              method: "euler"
      data_fields: 
        # if the order of the data_fields changes,
        # the order of the above StochasticInterpolant inputs must also change
        - "species"
        - "pos"
        - "cell"
      integration_time_steps: 100
  relative_si_costs:
    - 0.0  # Irrelevant.
    - 0.5
    - 0.5
  sampler:
    class_path: omg.sampler.sample_from_rng.SampleFromRNG
    init_args:
      cell_distribution:
        class_path: omg.sampler.distributions.InformedLatticeDistribution
        init_args:
          dataset_name: "mp_20"
      species_distribution:
        class_path: omg.sampler.distributions.MirrorData
  model:
    class_path: omg.model.model.Model
    init_args:
      encoder:
        class_path: omg.model.encoders.cspnet_full.CSPNetFull
        # assume all defaults are good
        # prop: True
      head:
        class_path: omg.model.heads.pass_through.PassThrough
      time_embedder:
        class_path: omg.model.model_utils.SinusoidalTimeEmbeddings
        init_args:
          dim: 256 # has to be same as latent_dim in cspnet
      # prop_embedder:
      #       class_path: omg.model.model_utils.SinusoidalTimeEmbeddings
      #       init_args:
      #           dim: 32 # has to be sam eas prop_emb_dim of adapter module
      # property_keys: "band_gap"
  use_min_perm_dist: true
data:
  train_dataset:
    class_path: omg.datamodule.dataloader.OMGTorchDataset
    init_args:
      dataset:
        class_path: omg.datamodule.datamodule.DataModule
        init_args:
          lmdb_paths:
           - "data/mp_20/train.lmdb"
      niggli: False
          # property_keys: # specify only when you wanna do guided training
          #  - "band_gap"
  val_dataset:
    class_path: omg.datamodule.dataloader.OMGTorchDataset
    init_args:
      dataset:
        class_path: omg.datamodule.datamodule.DataModule
        init_args:
          lmdb_paths:
           - "data/mp_20/val.lmdb"
      niggli: False
  predict_dataset:
    class_path: omg.datamodule.dataloader.OMGTorchDataset
    init_args:
      dataset:
        class_path: omg.datamodule.datamodule.DataModule
        init_args:
          lmdb_paths:
           - "data/mp_20/train.lmdb"
      niggli: False
  batch_size: 256
trainer:
  callbacks:
    - class_path: lightning.pytorch.callbacks.ModelCheckpoint
      init_args:
        save_top_k: 1
        monitor: "val_loss_total"
    - class_path: omg.utils.OMGLearningRateFinder
      init_args:
        min_lr: 0.00001
        num_training_steps: 200
    - class_path: lightning.pytorch.callbacks.EarlyStopping
      init_args:
        patience: 100
        monitor: "val_loss_total"
  gradient_clip_val: 0.5
  num_sanity_val_steps: 0
  strategy: "ddp_find_unused_parameters_true"
