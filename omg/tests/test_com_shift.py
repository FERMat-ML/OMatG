import pytest
import torch
from omg.si.corrector import IdentityCorrector, PeriodicBoundaryConditionsCorrector


@pytest.mark.parametrize("corrector,x,batch_indices,expected",
                         [(IdentityCorrector(),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 1, 2]),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]])),
                          (IdentityCorrector(),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 0, 1]),
                           torch.tensor([[0.505, 0.475, 0.25], [0.505, 0.475, 0.25], [0.45, 0.65, 0.5]])),
                          (IdentityCorrector(),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 1, 1]),
                           torch.tensor([[0.11, 0.85, 0.2], [0.675, 0.375, 0.4], [0.675, 0.375, 0.4]])),
                          (IdentityCorrector(),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 0, 0]),
                           torch.tensor([[0.486667, 0.533333, 0.333333], [0.486667, 0.533333, 0.333333],
                                         [0.486667, 0.533333, 0.333333]])),
                          (PeriodicBoundaryConditionsCorrector(0, 1),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 1, 2]),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]])),
                          (PeriodicBoundaryConditionsCorrector(0, 1),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 0, 1]),
                           torch.tensor([[0.005, 0.975, 0.25], [0.005, 0.975, 0.25], [0.45, 0.65, 0.5]])),
                          (PeriodicBoundaryConditionsCorrector(0, 1),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 1, 1]),
                           torch.tensor([[0.11, 0.85, 0.2], [0.675, 0.875, 0.4], [0.675, 0.875, 0.4]])),
                          (PeriodicBoundaryConditionsCorrector(0, 1),
                           torch.tensor([[0.11, 0.85, 0.2], [0.9, 0.1, 0.3], [0.45, 0.65, 0.5]]),
                           torch.tensor([0, 0, 0]),
                           torch.tensor([[0.0825345, 0.855948, 0.327034], [0.0825345, 0.855948, 0.327034],
                                         [0.0825345, 0.855948, 0.327034]])),
                          (PeriodicBoundaryConditionsCorrector(1.3, 2.4),
                           torch.tensor([[0.11 * 1.1 + 1.3, 0.85 * 1.1 + 1.3, 0.2 * 1.1 + 1.3],
                                         [0.9 * 1.1 + 1.3, 0.1 * 1.1 + 1.3, 0.3 * 1.1 + 1.3],
                                         [0.45 * 1.1 + 1.3, 0.65 * 1.1 + 1.3, 0.5 * 1.1 + 1.3]]),
                           torch.tensor([0, 1, 2]),
                           torch.tensor([[0.11 * 1.1 + 1.3, 0.85 * 1.1 + 1.3, 0.2 * 1.1 + 1.3],
                                         [0.9 * 1.1 + 1.3, 0.1 * 1.1 + 1.3, 0.3 * 1.1 + 1.3],
                                         [0.45 * 1.1 + 1.3, 0.65 * 1.1 + 1.3, 0.5 * 1.1 + 1.3]])),
                          (PeriodicBoundaryConditionsCorrector(1.3, 2.4),
                           torch.tensor([[0.11 * 1.1 + 1.3, 0.85 * 1.1 + 1.3, 0.2 * 1.1 + 1.3],
                                         [0.9 * 1.1 + 1.3, 0.1 * 1.1 + 1.3, 0.3 * 1.1 + 1.3],
                                         [0.45 * 1.1 + 1.3, 0.65 * 1.1 + 1.3, 0.5 * 1.1 + 1.3]]),
                           torch.tensor([0, 0, 1]),
                           torch.tensor([[0.005 * 1.1 + 1.3, 0.975 * 1.1 + 1.3, 0.25 * 1.1 + 1.3],
                                         [0.005 * 1.1 + 1.3, 0.975 * 1.1 + 1.3, 0.25 * 1.1 + 1.3],
                                         [0.45 * 1.1 + 1.3, 0.65 * 1.1 + 1.3, 0.5 * 1.1 + 1.3]])),
                          (PeriodicBoundaryConditionsCorrector(1.3, 2.4),
                           torch.tensor([[0.11 * 1.1 + 1.3, 0.85 * 1.1 + 1.3, 0.2 * 1.1 + 1.3],
                                         [0.9 * 1.1 + 1.3, 0.1 * 1.1 + 1.3, 0.3 * 1.1 + 1.3],
                                         [0.45 * 1.1 + 1.3, 0.65 * 1.1 + 1.3, 0.5 * 1.1 + 1.3]]),
                           torch.tensor([0, 1, 1]),
                           torch.tensor([[0.11 * 1.1 + 1.3, 0.85 * 1.1 + 1.3, 0.2 * 1.1 + 1.3],
                                         [0.675 * 1.1 + 1.3, 0.875 * 1.1 + 1.3, 0.4 * 1.1 + 1.3],
                                         [0.675 * 1.1 + 1.3, 0.875 * 1.1 + 1.3, 0.4 * 1.1 + 1.3]])),
                          (PeriodicBoundaryConditionsCorrector(1.3, 2.4),
                           torch.tensor([[0.11 * 1.1 + 1.3, 0.85 * 1.1 + 1.3, 0.2 * 1.1 + 1.3],
                                         [0.9 * 1.1 + 1.3, 0.1 * 1.1 + 1.3, 0.3 * 1.1 + 1.3],
                                         [0.45 * 1.1 + 1.3, 0.65 * 1.1 + 1.3, 0.5 * 1.1 + 1.3]]),
                           torch.tensor([0, 0, 0]),
                           torch.tensor([[0.0825345 * 1.1 + 1.3, 0.855948 * 1.1 + 1.3, 0.327034 * 1.1 + 1.3],
                                         [0.0825345 * 1.1 + 1.3, 0.855948 * 1.1 + 1.3, 0.327034 * 1.1 + 1.3],
                                         [0.0825345 * 1.1 + 1.3, 0.855948 * 1.1 + 1.3, 0.327034 * 1.1 + 1.3]])),
                          ])
def test_com(corrector, x, batch_indices, expected):
    assert torch.allclose(corrector.compute_center_of_mass(x, batch_indices), expected)
